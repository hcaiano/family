---
description: 
globs: 
alwaysApply: true
---
# Family App - Development Plan (MVP Focused)

**Core Goal (MVP):** Build a web application using Next.js 15 and Supabase to help Portuguese users manage finances by:
1.  Allowing management of multiple bank accounts.
2.  Importing bank statements via file upload using **rule-based parsing**.
3.  Automatically enriching transactions with **vendor identification using LLMs**.
4.  Allowing manual upload of invoices.
5.  Automatically extracting key invoice data using **specialized Document AI**.
6.  **Matching transactions to invoices** based on enriched data.
7.  Providing a UI for reviewing and manually reconciling matches.

**Technology Stack:**

*   **Frontend:** Next.js 15 (App Router) with React & Tailwind CSS. ([x] Done)
*   **Backend Logic:** Next.js API Routes (Edge/Serverless Functions on Vercel). ([/] Partially Done)
*   **Database:** Supabase PostgreSQL. ([x] Done)
*   **Authentication:** Supabase Auth. ([x] Done - Base Auth)
*   **Storage:** Supabase Storage (for statements and invoices). ([x] Done)
*   **AI Integration:**
    *   Calling external **Specialized Document AI APIs** for invoice parsing. ([ ] Not Done)
    *   Calling external **LLM APIs (e.g., via OpenRouter)** for asynchronous transaction vendor enrichment. ([ ] Not Done)
*   **File Parsing:** Libraries within Next.js API Routes for **rule-based statement parsing** (e.g., `papaparse`, `xlsx`). ([x] Partially Done - Revolut/BPI rules exist)
*   **Cron Jobs:** Vercel Cron Jobs (for batch processing). ([ ] Not Done)

**Data Model (Supabase - `public` schema):**

*   `profiles`: ([/] Partially Done - Exists, Needs Core Enhancements)
    *   **Needs (Core):** `role` (text, e.g., 'user', 'accountant', default 'user') - *Defer accountant logic, but add field*.
    *   **Needs (Deferred):** Encrypted cloud storage tokens (`dropbox_*`, `gdrive_*`), `invited_by_user_id`.
*   `bank_accounts`: **(New Table)** ([ ] Not Done)
    *   `id` (uuid, PK), `user_id` (uuid, FK to `auth.users`, not null), `account_name` (text, not null), `bank_identifier` (text, nullable), `account_number_last4` (text, nullable), `currency` (text, not null), `created_at` (timestamptz, default now()), `updated_at` (timestamptz, default now()).
*   `vendors`: **(New Table - Core for Matching)** ([ ] Not Done)
    *   `id` (uuid, PK), `user_id` (uuid, FK to `auth.users`, not null), `name` (text, not null), `created_at` (timestamptz, default now()), `updated_at` (timestamptz, default now()).
    *   **Constraint:** UNIQUE(`user_id`, `name`).
*   `statements`: ([/] Partially Done - Exists, Needs Core Enhancements)
    *   **Needs (Core):** `bank_account_id` (uuid, FK to `bank_accounts.id`, not null), `status` (enum: 'uploaded', 'parsing', 'parsed', 'error', default 'uploaded').
*   `transactions`: ([/] Partially Done - Exists, Needs Core Enhancements)
    *   **Needs (Core):**
        *   `bank_account_id` (uuid, FK to `bank_accounts.id`, not null).
        *   `statement_id` (uuid, FK to `statements.id`, not null).
        *   `vendor_id` (uuid, FK to `vendors.id`, nullable) - *Crucial for matching*.
        *   `ai_analysis_status` (enum: 'pending', 'processing', 'completed', 'error', 'needs_vendor_review', default 'pending').
        *   `ai_extracted_vendor` (text, nullable) - Raw LLM suggestion.
        *   `invoice_id` (uuid, FK to `invoices.id`, nullable) - *The goal link*.
    *   **Needs (Deferred):** `ai_extracted_category`, `ai_extraction_confidence`, `ai_summary`, `has_multiple_invoices`.
    *   **Deprecate:** `source_bank`.
*   `invoices`: ([/] Partially Done - Exists, Needs Core Enhancements)
    *   **Needs (Core):**
        *   `status` (enum: 'uploaded', 'pending_extraction', 'extraction_error', 'pending_match', 'matched', 'match_failed', 'manual_match', default 'uploaded').
        *   `extracted_vendor_name` (text, nullable).
        *   `extracted_invoice_date` (date, nullable).
        *   `extracted_total_amount` (numeric, nullable).
        *   `extracted_currency` (text, nullable).
        *   `extracted_nif_number` (text, nullable).
        *   `extracted_invoice_number` (text, nullable).
        *   `manual_vendor_name` (text, nullable), `manual_invoice_date` (date, nullable), etc. (for overrides).
        *   `source` (enum: 'upload', 'dropbox', 'gdrive', default 'upload').
    *   **Needs (Deferred):** `cloud_storage_status`, `cloud_storage_path`, `raw_text`.

---

**Core Development Path (MVP Steps):**

**Step 1: Foundational Database Schema (Phase 2 Core)**
*   [ ] **Create Migration:**
    *   Add `role` to `profiles`.
    *   Create `bank_accounts` table.
    *   Create `vendors` table.
    *   Add `bank_account_id`, `status` to `statements`.
    *   Add `bank_account_id`, `statement_id`, `vendor_id`, `ai_analysis_status`, `ai_extracted_vendor`, `invoice_id` to `transactions`. Deprecate `source_bank`.
    *   Add `status`, `extracted_*`, `manual_*`, `source` fields to `invoices`.
*   [ ] **Apply Migration:** Use Supabase tooling.
*   [ ] **Update Types:** Run `pnpm types:supabase`.

**Step 2: Bank Account Management (Phase 3 Core)**
*   [x] Build UI form for adding bank accounts (`/bank-accounts/new`).
*   [ ] Implement API route/Server Action (`/api/bank-accounts`) for saving accounts securely.
*   [ ] Create UI page (`/bank-accounts`) to list existing accounts.

**Step 3: Statement Processing (Phase 5 & 6 Core)**
*   [/] Update statement upload UI: Add dropdown to select target `bank_account_id`.
*   [ ] Enhance API Route (`/api/process-statement`, Serverless):
    *   Accept `bank_account_id`.
    *   Use existing rule-based parsing logic (BPI/Revolut).
    *   Insert validated transactions into DB, linking `bank_account_id`, `statement_id`, and setting `ai_analysis_status` to 'pending'.
    *   Update `statements` status ('parsing', 'parsed', 'error').
*   [ ] Trigger `/api/process-statement` from the frontend after successful upload.
*   [/] Update transaction list UI (`/transactions`) to show raw data initially, filterable by `bank_account_id`.

**Step 4: Vendor Enrichment (Phase 8 Core)**
*   [ ] Create API Route (`/api/transactions/analyze-batch`, Serverless).
*   [ ] Implement logic to fetch a batch of transactions (`ai_analysis_status` = 'pending').
*   [ ] **Call LLM:** Send description, amount, date etc. -> Get potential vendor name (`ai_extracted_vendor`).
*   [ ] **Implement Vendor Matching & Creation:**
    *   Match `ai_extracted_vendor` against `vendors` table.
    *   If match: Link `transactions.vendor_id`. Set status 'completed'.
    *   If no match (but recurring): Auto-create `vendors` record, link `transactions.vendor_id`. Set status 'completed'.
    *   If no match (infrequent): Set status 'needs_vendor_review'.
*   [ ] Update `transactions` record with `vendor_id` and `ai_analysis_status`.
*   [ ] Configure Vercel Cron Job to run `/api/transactions/analyze-batch` periodically.
*   [ ] Update transaction list UI: Display `vendors.name` (via join) when `vendor_id` is populated. Add indicator for 'needs_vendor_review'. *Allowing user override can be a fast-follow.*

**Step 5: Invoice Processing (Phase 9 Core)**
*   [ ] Build basic UI (`/invoices/new` or similar) for manual invoice file upload (PDF/Image) directly to Supabase Storage.
*   [ ] Create `invoices` record upon upload with `status` 'uploaded' or 'pending_extraction'.
*   [ ] Create API Route (`/api/invoices/extract-batch`, Serverless).
*   [ ] Implement logic to fetch batch of invoices ('pending_extraction').
*   [ ] **Integrate with Specialized Document AI Service:** Fetch file from Supabase Storage, send to Textract/Google Doc AI, process structured response.
*   [ ] Update `invoices` record with `extracted_*` data and set status ('pending_match' or 'extraction_error').
*   [ ] Configure Vercel Cron Job (or trigger after upload) to run `/api/invoices/extract-batch`.
*   [ ] Update Invoice list UI (`/invoices`) to show extracted data and status. *Allowing manual correction can be a fast-follow.*

**Step 6: Matching Engine & Reconciliation (Phase 10 Core)**
*   [ ] Create API Route (`/api/matching/run`, Serverless).
*   [ ] Implement core matching logic:
    *   Fetch transactions with `vendor_id` and invoices with `extracted_vendor_name` (status 'pending_match').
    *   Match based on `vendor_id`/`extracted_vendor_name` similarity, date proximity, amount.
    *   Prioritize high-confidence matches first.
*   [ ] Update matched records: Link `transactions.invoice_id` and update `invoices.status` to 'matched'. Update `transactions` status if needed.
*   [ ] Configure Vercel Cron Job to run `/api/matching/run` periodically.
*   [/] Update Reconciliation UI (e.g., `/reconciliation` or enhance `/transactions`):
    *   Clearly display matched transaction-invoice pairs.
    *   Show unmatched transactions and invoices.
    *   Refine existing manual matching UI to allow linking a transaction to an invoice (sets `transactions.invoice_id`, updates statuses).
*   [x] Allow marking transactions as 'ignored' for matching.
*   [/] Ensure manual reconciliation API updates statuses correctly.

---

**Deferred Features / Phases (Post-MVP):**

*   **Cloud Storage Integration (Phase 4, 7, 11):** Connecting Dropbox/Google Drive, background sync for input/output. Token encryption.
*   **Accountant Role & Access Control (Phase 12):** Inviting accountants, RLS policies, UI adaptations.
*   **Advanced AI Features (Phase 8, 13):** Category extraction, transaction summarization, improved prompts, AI matching hints.
*   **UI/UX Refinements:** Advanced filtering/sorting, dashboards, vendor management screen, invoice data editing UI, handling multi-invoice scenarios.
*   **Scalability & Optimizations (Phase 13):** DB indexing, performance tuning.
*   **Expanded Bank Support (Phase 6):** Adding more rule-based parsers.
*   **Monetization (Phase 14):** Tiered plans, etc.

---

**Immediate Next Steps:**

1.  **Implement Step 1:** Create and apply the database migration for the core schema changes. Run `pnpm types:supabase`.
2.  **Implement Step 2:** Build the API and UI for adding and listing bank accounts.
3.  **Implement Step 3:** Adapt the statement upload process and the core parsing logic.
