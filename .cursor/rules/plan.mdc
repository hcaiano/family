---
description: This is the initial plan of my application
globs: 
alwaysApply: false
---
# Family App - Development Plan

**Core Goal:** Build a scalable web application using Next.js 15 and Supabase (DB/Auth/Storage) to help Portuguese users manage finances by importing bank statements, uploading/syncing invoices from Cloud Storage (Dropbox/Google Drive), automatically matching them using AI hosted on Vercel, providing read-only accountant access, and exporting processed documents back to Cloud Storage in an organized manner.

**Technology Stack:**

*   **Frontend:** Next.js 15 (App Router) with React & Tailwind CSS. ([x] Done)
*   **Backend Logic:** Next.js API Routes (Edge/Serverless Functions on Vercel). ([ ] Partially Done)
*   **Database:** Supabase PostgreSQL. ([x] Done)
*   **Authentication:** Supabase Auth (with Row Level Security & potentially custom claims for roles). ([x] Done - Base Auth)
*   **Storage:** Supabase Storage (intermediate storage) & Dropbox/Google Drive APIs (primary user storage). ([x] Done - Supabase Storage)
*   **Scheduled Tasks:** Vercel Cron Jobs. ([ ] Not Done)
*   **AI Integration:** Calling external AI APIs from Next.js API Routes. ([ ] Not Done)
*   **File Parsing:** Libraries within Next.js API Routes. ([ ] Not Done)
*   **Cloud Storage APIs:** Dropbox API, Google Drive API. ([ ] Not Done)

**Data Model (Supabase - `public` schema):**

*   `profiles`: ([/] Partially Done - Exists, Needs Enhancement)
    *   **Needs:**
        *   `role` (text, e.g., 'user', 'accountant', default 'user')
        *   `dropbox_access_token` (text, encrypted, nullable)
        *   `dropbox_refresh_token` (text, encrypted, nullable)
        *   `gdrive_access_token` (text, encrypted, nullable)
        *   `gdrive_refresh_token` (text, encrypted, nullable)
        *   `invited_by_user_id` (uuid, FK to `profiles.id`, nullable - for accountants)
*   `bank_accounts`: **(New Table)** ([ ] Not Done)
    *   `id`, `user_id`, `account_name`, `bank_identifier`, `account_number_last4`, `currency`, `created_at`, `updated_at`
*   `statements`: ([/] Partially Done - Exists, Needs Enhancement)
    *   **Needs:** `bank_account_id` FK, `status` enum ('uploaded', 'parsing', 'parsed', 'error').
*   `transactions`: ([/] Partially Done - Exists, Needs Enhancement)
    *   **Needs:** `bank_account_id` FK, `statement_id` FK, `ai_analysis_status`, `ai_extracted_vendor`, `ai_extracted_category`.
    *   **Needs:** Deprecate `source_bank`.
    *   **Needs:** Consider `has_multiple_invoices` (boolean, default false).
*   `invoices`: ([/] Partially Done - Exists, Needs Enhancement)
    *   **Needs:** Expanded `status` enum, `extracted_*`, `manual_*`, `nif_number`, `invoice_number`, `raw_text` fields.
    *   **Needs:** `cloud_storage_status` (enum: 'pending_sync', 'syncing', 'synced', 'sync_error', default null).
    *   **Needs:** `cloud_storage_path` (text, nullable).
    *   **Needs:** `source` (enum: 'upload', 'dropbox', 'gdrive', default 'upload').

---

**Development Phases:**

**Phase 1: Core Setup & Auth**
*   [x] Initialize Next.js project.
*   [x] Setup Supabase project.
*   [x] Implement Google OAuth.
*   [/] Create basic protected routes/layout.
*   [x] Setup basic UI components.

**Phase 2: Foundational Data Model Enhancements**
*   [ ] **Update `profiles` table schema:** Add `role`, encrypted token fields, `invited_by_user_id`. (Migration needed)
*   [ ] **Create `bank_accounts` table schema.** (Migration needed)
*   [ ] **Update `statements` table schema:** Add `bank_account_id` FK, `status` field. (Migration needed)
*   [ ] **Update `transactions` table schema:** Add `bank_account_id` FK, `statement_id` FK, AI fields. Deprecate `source_bank`. Add `has_multiple_invoices` if desired. (Migration needed)
*   [ ] **Update `invoices` table schema:** Add new statuses, extracted/manual fields, cloud sync fields, `source`. (Migration needed)
*   [ ] **Implement Encryption:** Set up mechanism for encrypting/decrypting cloud storage tokens.

**Phase 3: Multi-Account Management UI & Logic**
*   [ ] Build UI form for adding bank accounts.
*   [ ] Implement API route/Server Action (`/api/bank-accounts`) for saving accounts.
*   [ ] Create UI page (`/bank-accounts`) to list accounts.

**Phase 4: Cloud Storage Connection UI (Settings)**
*   [ ] Add Settings page UI.
*   [ ] Implement OAuth flow UI buttons ("Connect Dropbox", "Connect Google Drive").
*   [ ] Create API routes (`/api/auth/[provider]/connect`, `/api/auth/[provider]/callback`) for OAuth flow and saving encrypted tokens.
*   [ ] Add UI to show connection status and allow disconnection.

**Phase 5: Adapt Statement Upload & Display for Multi-Account**
*   [/] Update statement upload UI: Select `bank_account_id`, trigger parsing API.
*   [/] Update transaction list UI: Filter/group by account.
*   [/] Update statement list UI: Show associated account.

**Phase 6: Statement Parsing Logic (Next.js API Route)**
*   [ ] Create API Route (`/api/statements/parse`, Serverless recommended).
*   [ ] Implement parsing logic for BPI/Revolut CSV.
*   [ ] Insert transactions into DB via Supabase client.
*   [ ] Call this API from frontend after upload.

**Phase 7: Invoice Processing from Cloud Storage (Input Sync - Cron)**
*   [ ] Create Next.js API Route (`/api/sync/cloud-input`, Serverless).
    *   Implement logic to check user's cloud storage input folder via API.
    *   Find new files, download temporarily, upload to Supabase Storage.
    *   Create `invoices` record in DB.
    *   Move/delete processed file in user's cloud storage.
    *   Trigger Invoice AI Extraction (Phase 9).
*   [ ] Configure a Vercel Cron Job for this route.

**Phase 8: AI Transaction Analysis (Next.js API Route + Cron)**
*   [ ] Create API Route (`/api/transactions/analyze-batch`, Serverless).
*   [ ] Implement logic to call AI API for vendor/category extraction for pending transactions.
*   [ ] Update `transactions` table.
*   [ ] Configure Vercel Cron Job.
*   [ ] Display AI results in UI.

**Phase 9: Invoice AI Extraction (Next.js API Route)**
*   [ ] Create API Route (`/api/invoices/extract`, Serverless recommended).
*   [ ] Implement logic to call OCR/AI service for pending invoices.
*   [ ] Update `invoices` table with extracted data.
*   [ ] Trigger this API from frontend (direct uploads) or Phase 7 (cloud sync).
*   [ ] Update Invoice list UI.

**Phase 10: Matching Engine & Reconciliation UI (Next.js API Route + Cron)**
*   [ ] Create API Route (`/api/matching/run`, Serverless).
*   [ ] Implement matching logic based on rules (amount, vendor, date, NIF).
*   [ ] Update matched records in Supabase.
*   [ ] Configure Vercel Cron Job.
*   [/] Update UIs to reflect matches.
*   [/] Build/Refine manual matching UI (side-by-side view).
*   [ ] Add UI for editing invoice data.
*   [x] Allow marking transactions as 'ignored'.
*   [/] Implement/Update API routes/Server Actions for manual reconciliation.

**Phase 11: Cloud Storage Export (Output Sync - Cron)**
*   [ ] Create Next.js API Route (`/api/sync/cloud-output`, Serverless).
    *   Implement logic to find 'matched' invoices pending sync.
    *   Fetch linked transaction.
    *   Determine standardized target cloud path/filename (handle multi-invoice).
    *   Fetch file from Supabase Storage, upload via Dropbox/GDrive API.
    *   Update `invoices` record status and path.
*   [ ] Configure a Vercel Cron Job for this route.

**Phase 12: Accountant Role & Access Control**
*   [ ] **Backend:**
    *   Implement RBAC checks in API routes/Server Actions.
    *   Adjust Supabase RLS policies for read-only accountant access (scoped by `invited_by_user_id`, excluding sensitive fields).
*   [ ] **Frontend:**
    *   Create UI for users to invite accountants (creates profile, sends invite).
    *   Adapt login/signup for accountants.
    *   Conditionally render UI based on role.
    *   Verify data filtering for accountants.

**Phase 13: Refinements & Scalability**
*   [ ] Add more bank parsers / configurable system.
*   [ ] Improve AI prompts, matching, filename standardization.
*   [ ] Add reporting/dashboards (considering accountant view).
*   [ ] Optimize DB queries/indexes.

**Phase 14: Monetization & Advanced Features (Future)**
*   [ ] Tiered plans, etc.

---

**Next Steps:**

1.  **Focus on Phase 2:** Implement the database schema changes via Supabase migrations.
2.  **Proceed to Phase 3:** Build the UI and API logic for managing bank accounts.